<?xml version="1.0" encoding="ISO-8859-1"?>

<project basedir=".." default="all" name="All">


	<target name="init" description="inits the build">

		<property environment="env" />

		<property name="build.dir" value="build" />

		<!-- read build number -->
		<buildnumber file="${build.dir}/BUILD" />

		<!-- read version number -->
		<loadfile property="appversion" srcFile="${build.dir}/RELEASE">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<!-- prepare cvs tag -->
		<copy file="${build.dir}/RELEASE" tofile="${build.dir}/TAG" />
		<replaceregexp flags="g" file="${build.dir}/TAG" match="\." replace="_" />
		<loadfile property="mytag" srcFile="${build.dir}/TAG">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<delete file="${build.dir}/TAG" />
		<property name="tag" value="V_${mytag}_BUILD_${build.number}" />

		<echo message="VERSION: ${appversion}" />
		<echo message="CVS-Tag: ${tag}" />
		<echo message="BUILD  : ${build.number}" />
		<echo message="JAVA   : ${java.version}" />

		<property name="define.projectname" 				       value="jameica" />
		<property name="define.jarfilename" 				       value="jameica.jar" />
		<property name="define.jarfilename.win32" 			   value="jameica-win32.jar" />
		<property name="define.jarfilename.macos" 		     value="jameica-macos.jar" />
		<property name="define.jarfilename.linux" 			   value="jameica-linux.jar" />
		<property name="define.jarfilename.linux-amd64" 	 value="jameica-linux-amd64.jar" />
    <property name="define.jarfilename.openbsd"        value="jameica-openbsd.jar" />
		<property name="define.srcfilename" 				       value="jameica.src.zip" />
		<property name="define.javadocfilename" 			     value="jameica.javadoc.zip" />
		<property name="define.commonlibs" 					       value="lib/swt/org.eclipse.core.runtime_3.1.1.jar lib/swt/org.eclipse.jface_3.1.1.jar lib/swt/org.eclipse.osgi_3.1.1.jar lib/swt/org.eclipse.ui.forms_3.1.0.jar lib/de_willuhn_ds/de_willuhn_ds.jar lib/de_willuhn_util/de_willuhn_util.jar lib/nanoxml/nanoxml-2.2.3.jar lib/swtcalendar/swtcalendar.jar lib/bouncycastle/bcprov-jdk14-124.jar lib/jakarta_commons/commons-cli-1.0.jar lib/jakarta_commons/commons-collections.jar lib/velocity/logkit-1.0.1.jar lib/velocity/oro.jar lib/velocity/velocity-1.4.jar img lang help" />
		<property name="define.package" 					         value="de.willuhn.jameica" />
		<property name="project.nightly" 					         value="releases/nightly" />

		<property name="project.release" 					         value="releases/${appversion}-${build.number}" />
		<property name="project.src" 						           value="${project.release}/src/classes" />
		<property name="project.tmp" 						           value="${project.release}/tmp" />
		<property name="project.javadoc" 					         value="${project.release}/javadoc" />
		<property name="project.zipdir" 					         value="${project.release}/${define.projectname}" />

		<property name="project.zipfilename" 				       value="${define.projectname}.zip" />
		<property name="project.zipfilename.win32"			   value="${define.projectname}-win32.zip" />
		<property name="project.zipfilename.linux"			   value="${define.projectname}-linux.zip" />
		<property name="project.zipfilename.linux-amd64"	 value="${define.projectname}-linux-amd64.zip" />
		<property name="project.zipfilename.macos"			   value="${define.projectname}-macos.zip" />
    <property name="project.zipfilename.openbsd"       value="${define.projectname}-openbsd.zip" />

		<property name="src.dir" 							value="src" />
		<property name="icon.dir" 						value="${src.dir}/img" />
		<property name="lang.dir" 						value="${src.dir}/lang" />
		<property name="help.dir" 						value="${src.dir}/help" />
		<property name="lib.dir" 							value="lib" />
		<property name="class.dir" 						value="${project.tmp}/bin" />


		<path id="compilepath">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<target depends="init" name="cvs" description="performs cvs update">
		<exec executable="cvs" failonerror="true" dir="${basedir}">
			<arg line="update -dP" />
		</exec>
	</target>



	<target depends="init" name="compile" description="compiles everything">

		<mkdir dir="${class.dir}" />

		<javac debug="true" debuglevel="lines,vars,source" deprecation="true" destdir="${class.dir}" srcdir="${src.dir}">
			<classpath refid="compilepath" />
		</javac>

		<rmic verify="true" base="${class.dir}">
			<include name="**/*.class" />
			<exclude name="**/gui/**/*.class"/>
			<classpath refid="compilepath" />
		</rmic>

		<copy todir="${class.dir}/img">
			<fileset dir="${icon.dir}" />
		</copy>
		<copy todir="${class.dir}/lang">
			<fileset dir="${lang.dir}" />
		</copy>
		<copy todir="${class.dir}/help">
			<fileset dir="${help.dir}" />
		</copy>

		<copy file="${src.dir}/system.xml" tofile="${class.dir}/system.xml" />

	</target>



	<target depends="compile" name="cvstag" description="tags the source in the CVS">

		<exec executable="cvs" failonerror="true" dir="${basedir}">
			<arg line="tag ${tag}" />
		</exec>

	</target>



	<target depends="compile" name="jar" description="generates the jar and zip file">

		<mkdir dir="${project.release}" />
		<mkdir dir="${project.zipdir}" />

		<tstamp/>

		<jar destfile="${project.zipdir}/${define.jarfilename}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Implementation-Title" value="${define.projectname}" />
				<attribute name="Implementation-Version" value="${appversion}" />
				<attribute name="Implementation-Buildnumber" value="${build.number}" />
			</manifest>
			<fileset dir="${class.dir}" />
		</jar>


		<jar destfile="${project.zipdir}/${define.jarfilename.linux}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Implementation-Title" value="${define.projectname}" />
				<attribute name="Implementation-Version" value="${appversion}" />
				<attribute name="Implementation-Buildnumber" value="${build.number}" />
				<attribute name="Main-Class" value="de.willuhn.jameica.Main" />
				<attribute name="Class-Path" value="${define.jarfilename} lib/swt/linux/swt.jar ${define.commonlibs}" />
			</manifest>
			<fileset dir="${class.dir}" includes="**/Main.class" />
		</jar>

		<jar destfile="${project.zipdir}/${define.jarfilename.macos}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Implementation-Title" value="${define.projectname}" />
				<attribute name="Implementation-Version" value="${appversion}" />
				<attribute name="Implementation-Buildnumber" value="${build.number}" />
				<attribute name="Main-Class" value="de.willuhn.jameica.Main" />
				<attribute name="Class-Path" value="${define.jarfilename} lib/swt/macos/swt.jar ${define.commonlibs}" />
			</manifest>
			<fileset dir="${class.dir}" includes="**/Main.class" />
		</jar>

    <jar destfile="${project.zipdir}/${define.jarfilename.openbsd}">
      <manifest>
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Built-Date" value="${DSTAMP}" />
        <attribute name="Implementation-Title" value="${define.projectname}" />
        <attribute name="Implementation-Version" value="${appversion}" />
        <attribute name="Implementation-Buildnumber" value="${build.number}" />
        <attribute name="Main-Class" value="de.willuhn.jameica.Main" />
        <attribute name="Class-Path" value="${define.jarfilename} lib/swt/openbsd/swt.jar lib/swt/openbsd/swt-pi.jar lib/swt/openbsd/swt-mozilla.jar ${define.commonlibs}" />
      </manifest>
      <fileset dir="${class.dir}" includes="**/Main.class" />
    </jar>

    <jar destfile="${project.zipdir}/${define.jarfilename.linux-amd64}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Implementation-Title" value="${define.projectname}" />
				<attribute name="Implementation-Version" value="${appversion}" />
				<attribute name="Implementation-Buildnumber" value="${build.number}" />
				<attribute name="Main-Class" value="de.willuhn.jameica.Main" />
				<attribute name="Class-Path" value="${define.jarfilename} lib/swt/linux-amd64/swt.jar ${define.commonlibs}" />
			</manifest>
			<fileset dir="${class.dir}" includes="**/Main.class" />
		</jar>

		<jar destfile="${project.zipdir}/${define.jarfilename.win32}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Built-Date" value="${DSTAMP}" />
				<attribute name="Implementation-Title" value="${define.projectname}" />
				<attribute name="Implementation-Version" value="${appversion}" />
				<attribute name="Implementation-Buildnumber" value="${build.number}" />
				<attribute name="Main-Class" value="de.willuhn.jameica.Main" />
				<attribute name="Class-Path" value="${define.jarfilename} lib/swt/win32/swt.jar ${define.commonlibs}" />
			</manifest>
			<fileset dir="${class.dir}" includes="**/Main.class" />
		</jar>

		<mkdir dir="${project.zipdir}/lib" />
		<mkdir dir="${project.zipdir}/plugins" />

		<copy todir="${project.zipdir}/lib">
			<fileset dir="${lib.dir}" />
		</copy>

		<copy todir="${project.zipdir}">
			<fileset dir="${build.dir}">
				<include name="*.sh"/>
				<include name="*.bat"/>
				<include name="rcjameica"/>
				<include name="jameica-icon-01.png"/>
        <include name="jameica-icon-02.png"/>
				<include name="COPYING"/>
				<include name="README"/>
			</fileset>
		</copy>

		<!-- ZIP-File fuer Linux -->
		<zip destfile="${project.release}/${project.zipfilename.linux}">
			<zipfileset dir="${project.release}" filemode="755">
				<include name="${define.projectname}" />
				<include name="${define.projectname}/${define.jarfilename}"/>
				<include name="${define.projectname}/${define.jarfilename.linux}"/>
				<include name="${define.projectname}/COPYING"/>
				<include name="${define.projectname}/README"/>
				<include name="${define.projectname}/jameica.sh"/>
				<include name="${define.projectname}/jameicaserver.sh"/>
				<include name="${define.projectname}/rcjameica"/>
				<include name="${define.projectname}/jameica-icon-01.png"/>
        <include name="${define.projectname}/jameica-icon-02.png"/>
				<include name="${define.projectname}/plugins"/>
				<include name="${define.projectname}/lib/**"/>

        <exclude name="${define.projectname}/lib/swt/openbsd/**"/>
				<exclude name="${define.projectname}/lib/swt/win32/**"/>
				<exclude name="${define.projectname}/lib/swt/macos/**"/>
				<exclude name="${define.projectname}/lib/swt/linux-amd64/**"/>
			</zipfileset>
		</zip>

		<!-- ZIP-File fuer Linux AMD 64 -->
		<zip destfile="${project.release}/${project.zipfilename.linux-amd64}">
			<zipfileset dir="${project.release}" filemode="755">
				<include name="${define.projectname}" />
				<include name="${define.projectname}/${define.jarfilename}"/>
				<include name="${define.projectname}/${define.jarfilename.linux-amd64}"/>
				<include name="${define.projectname}/COPYING"/>
				<include name="${define.projectname}/README"/>
				<include name="${define.projectname}/jameica-amd64.sh"/>
				<include name="${define.projectname}/jameicaserver-amd64.sh"/>
				<include name="${define.projectname}/rcjameica"/>
        <include name="${define.projectname}/jameica-icon-01.png"/>
        <include name="${define.projectname}/jameica-icon-02.png"/>
				<include name="${define.projectname}/plugins"/>
				<include name="${define.projectname}/lib/**"/>

        <exclude name="${define.projectname}/lib/swt/openbsd/**"/>
				<exclude name="${define.projectname}/lib/swt/win32/**"/>
				<exclude name="${define.projectname}/lib/swt/macos/**"/>
				<exclude name="${define.projectname}/lib/swt/linux/**"/>
			</zipfileset>
		</zip>

		<!-- ZIP-File fuer Win32 -->
		<zip destfile="${project.release}/${project.zipfilename.win32}">
			<zipfileset dir="${project.release}" filemode="755">
				<include name="${define.projectname}" />
				<include name="${define.projectname}/${define.jarfilename}"/>
				<include name="${define.projectname}/${define.jarfilename.win32}"/>
				<include name="${define.projectname}/COPYING"/>
				<include name="${define.projectname}/README"/>
				<include name="${define.projectname}/jameica.bat"/>
				<include name="${define.projectname}/jameicaserver.bat"/>
        <include name="${define.projectname}/jameica-icon-01.png"/>
        <include name="${define.projectname}/jameica-icon-02.png"/>
				<include name="${define.projectname}/plugins"/>
				<include name="${define.projectname}/lib/**"/>

        <exclude name="${define.projectname}/lib/swt/openbsd/**"/>
				<exclude name="${define.projectname}/lib/swt/macos/**"/>
				<exclude name="${define.projectname}/lib/swt/linux/**"/>
				<exclude name="${define.projectname}/lib/swt/linux-amd64/**"/>
			</zipfileset>
		</zip>

		<!-- ZIP-File fuer MacOS -->
		<zip destfile="${project.release}/${project.zipfilename.macos}">
			<zipfileset dir="${project.release}" filemode="755">
				<include name="${define.projectname}" />
				<include name="${define.projectname}/${define.jarfilename}"/>
				<include name="${define.projectname}/${define.jarfilename.macos}"/>
				<include name="${define.projectname}/COPYING"/>
				<include name="${define.projectname}/README"/>
				<include name="${define.projectname}/jameica-macos.sh"/>
				<include name="${define.projectname}/jameicaserver-macos.sh"/>
				<include name="${define.projectname}/rcjameica"/>
        <include name="${define.projectname}/jameica-icon-01.png"/>
        <include name="${define.projectname}/jameica-icon-02.png"/>
				<include name="${define.projectname}/plugins"/>
				<include name="${define.projectname}/lib/**"/>

        <exclude name="${define.projectname}/lib/swt/openbsd/**"/>
				<exclude name="${define.projectname}/lib/swt/win32/**"/>
				<exclude name="${define.projectname}/lib/swt/linux/**"/>
				<exclude name="${define.projectname}/lib/swt/linux-amd64/**"/>
			</zipfileset>
		</zip>

    <!-- ZIP-File fuer OpenBSD -->
    <zip destfile="${project.release}/${project.zipfilename.openbsd}">
      <zipfileset dir="${project.release}" filemode="755">
        <include name="${define.projectname}" />
        <include name="${define.projectname}/${define.jarfilename}"/>
        <include name="${define.projectname}/${define.jarfilename.openbsd}"/>
        <include name="${define.projectname}/COPYING"/>
        <include name="${define.projectname}/README"/>
        <include name="${define.projectname}/jameica-openbsd.sh"/>
        <include name="${define.projectname}/jameicaserver-openbsd.sh"/>
        <include name="${define.projectname}/rcjameica"/>
        <include name="${define.projectname}/jameica-icon-01.png"/>
        <include name="${define.projectname}/jameica-icon-02.png"/>
        <include name="${define.projectname}/plugins"/>
        <include name="${define.projectname}/lib/**"/>

        <exclude name="${define.projectname}/lib/swt/macos/**"/>
        <exclude name="${define.projectname}/lib/swt/win32/**"/>
        <exclude name="${define.projectname}/lib/swt/linux/**"/>
        <exclude name="${define.projectname}/lib/swt/linux-amd64/**"/>
      </zipfileset>
    </zip>

    <!-- ZIP-File mit allen Betriebssystemen -->
		<zip destfile="${project.release}/${project.zipfilename}">
			<zipfileset dir="${project.release}" filemode="755">
				<include name="${define.projectname}" />
				<include name="${define.projectname}/**" />
			</zipfileset>
		</zip>


	</target>


	<target depends="compile" name="src" description="build source package, depends compile target to make sure, the code has no errors">
		<mkdir dir="${project.release}" />
		<mkdir dir="${project.tmp}/${define.projectname}" />
		<copy todir="${project.tmp}/${define.projectname}">
			<fileset dir=".">
				<include name=".project" />
				<include name=".classpath" />
				<include name="${lib.dir}/**" />
				<include name="${src.dir}/**" />
				<include name="${build.dir}/**" />
				<exclude name="${build.dir}/BUILD" />
			</fileset>
		</copy>
		<zip casesensitive="true" zipfile="${project.release}/${define.srcfilename}">
			<fileset dir="${project.tmp}">
				<include name="${define.projectname}/**" />
			</fileset>
		</zip>
	</target>

	<target depends="compile" name="javadoc" description="creates the api doc">

		<mkdir dir="${project.javadoc}" />

		<javadoc destdir="${project.javadoc}" packagenames="${define.package}.*">
			<classpath refid="compilepath" />
			<sourcepath>
				<pathelement location="${src.dir}" />
			</sourcepath>
		</javadoc>

		<zip casesensitive="true" zipfile="${project.release}/${define.javadocfilename}">
			<fileset dir="${project.javadoc}">
				<include name="**" />
			</fileset>
		</zip>

	</target>


	<target name="clean" description="cleanup">
		<delete dir="${project.tmp}" />
		<delete dir="${project.zipdir}" />
		<delete dir="${project.javadoc}" />
	</target>


	<target name="sign" description="signs the jar/zip file">
		<checksum file="${project.release}/${define.srcfilename}" />
		<checksum file="${project.release}/${project.zipfilename}" />
		<checksum file="${project.release}/${project.zipfilename.win32}" />
		<checksum file="${project.release}/${project.zipfilename.linux}" />
		<checksum file="${project.release}/${project.zipfilename.linux-amd64}" />
		<checksum file="${project.release}/${project.zipfilename.macos}" />
    <checksum file="${project.release}/${project.zipfilename.openbsd}" />
		<echo message="Creating PGP signatures" />

		<exec executable="kgpg" failonerror="true" timeout="60000">
			<arg line="-S ${project.release}/${define.srcfilename}" />
		</exec>

		<exec executable="kgpg" failonerror="true" timeout="60000">
			<arg line="-S ${project.release}/${project.zipfilename}" />
		</exec>
		<exec executable="kgpg" failonerror="true" timeout="60000">
			<arg line="-S ${project.release}/${project.zipfilename.win32}" />
		</exec>
		<exec executable="kgpg" failonerror="true" timeout="60000">
			<arg line="-S ${project.release}/${project.zipfilename.linux}" />
		</exec>
		<exec executable="kgpg" failonerror="true" timeout="60000">
			<arg line="-S ${project.release}/${project.zipfilename.linux-amd64}" />
		</exec>
		<exec executable="kgpg" failonerror="true" timeout="60000">
			<arg line="-S ${project.release}/${project.zipfilename.macos}" />
		</exec>
    <exec executable="kgpg" failonerror="true" timeout="60000">
      <arg line="-S ${project.release}/${project.zipfilename.openbsd}" />
    </exec>
	</target>


	<target depends="init,compile,cvstag,jar,javadoc,src,sign,clean" description="build an official release" name="all" />

	<target depends="init,compile,jar,src,clean" description="build inofficial release" name="fast" />

	<target depends="init,cvs,compile,jar,javadoc,src" description="build nightly build" name="nightly">
		<mkdir dir="${project.nightly}" />

		<copy file="${project.release}/${project.zipfilename}" 				      tofile="${project.nightly}/${define.projectname}-${appversion}-nightly.zip" />
		<copy file="${project.release}/${project.zipfilename.linux}" 		    tofile="${project.nightly}/${define.projectname}-${appversion}-nightly-linux.zip" />
		<copy file="${project.release}/${project.zipfilename.linux-amd64}" 	tofile="${project.nightly}/${define.projectname}-${appversion}-nightly-linux-amd64.zip" />
		<copy file="${project.release}/${project.zipfilename.macos}" 		    tofile="${project.nightly}/${define.projectname}-${appversion}-nightly-macos.zip" />
		<copy file="${project.release}/${project.zipfilename.win32}" 		    tofile="${project.nightly}/${define.projectname}-${appversion}-nightly-win32.zip" />
    <copy file="${project.release}/${project.zipfilename.openbsd}"      tofile="${project.nightly}/${define.projectname}-${appversion}-nightly-openbsd.zip" />


		<copy file="${project.release}/${define.srcfilename}" 		          tofile="${project.nightly}/${define.projectname}-${appversion}-nightly.src.zip" />
		<copy file="${project.release}/${define.javadocfilename}" 	        tofile="${project.nightly}/${define.projectname}-${appversion}-nightly.javadoc.zip" />

		<!-- Die Datei brauchen die anderen Plugins zum Kompilieren //-->
		<copy file="${project.zipdir}/${define.jarfilename}" tofile="releases/jameica-lib.jar" />

		<delete dir="${project.release}" />
	</target>


</project>
